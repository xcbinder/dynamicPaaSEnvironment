# CICD backend pipeline will deploy all functions and creates the Event Grid topic subscription
# Required variables to set:  projName, azureServiceConnection
# Required resources deployed by IaC-Master, IaC-Shared and IaC-topic pipelines 

trigger: none

name: $(Date:yyyyMMdd)$(Rev:.r)

variables: 
  # Comment out if defined at pipeline definition
  projName: '<your_project_name>'
  azureServiceConnection: '<azureServiceConnectionName>'

  # Section - Topic deployment settings to suppoort PR flows as well
  topicName: $[ format('{0}{1}', variables['Build.SourceBranchName'], variables['System.PullRequest.PullRequestId'] ) ]

  # Section - IaC references
  masterKeyVault: 'master-$(projName)-kv'
  topicKeyVault: '$(projName)-$(hashTopicName)-kv'
  topicResourceGroup: '$(projName)-topic-$(topicName)'
  sharedResourceGroup: '$(projName)-shared'

  # Section - Functions deployment settings
  funcAppName: '$(projName)-$(hashTopicName)-func'

  # Section - Event grid deployment settings
  egSubscriptionName: '$(projName)-$(hashTopicName)-func'


jobs:
- job: Create_instanceCode
  displayName: Create instance code and topic hash
  pool: 
    vmImage: 'ubuntu-latest'
  steps:
  - task: AzureCLI@2
    displayName: 'create hash from branch name'
    inputs:
      azureSubscription: '$(azureServiceConnection)'
      scriptLocation: inlineScript
      scriptType: bash
      inlineScript: |
        hashTopicName=$(echo -n $(topicName) | md5sum | cut -c1-8)
        echo "hashTopicName=$hashTopicName"
        echo "##vso[task.setvariable variable=hashTopicName;isOutput=true]$hashTopicName"
    name: setHashTopicName
    
- job: BuildJob
  displayName: Build and Publish Functions
  dependsOn: 
  - Create_instanceCode
  pool:
    vmImage: 'windows-latest'
  variables:
    hashTopicName: $[ dependencies.Create_instanceCode.outputs['setHashTopicName.hashTopicName'] ]
  steps:

  - task: AzureKeyVault@1
    displayName: Get topic secrets from Topic KeyVault
    inputs:
      azureSubscription: $(azureServiceConnection)
      keyVaultName: $(topicKeyVault)
      secretsFilter: eventGridEndpoint, eventGridKey, dbName, containerName

  - task: AzureKeyVault@1
    displayName: Get shared secrets from Master KeyVault
    inputs:
      azureSubscription: $(azureServiceConnection)
      keyVaultName: $(masterKeyVault)
      secretsFilter: cosmosdbConnectionString

  - task: UseDotNet@2
    displayName: 'Acquire .NET Core SDK'
    inputs:
      packageType: sdk
      version: 3.1.x

  - task: DotNetCoreCLI@2
    displayName: Build functions
    inputs:
      command: 'build'
      projects: 'src/apps/functions/ExampleFunctions/*.csproj'

  - task: DotNetCoreCLI@2
    displayName: Publish functions release output to folder
    inputs:
      command: publish
      arguments: '--configuration Release --output publish_output'
      projects: 'src/apps/functions/ExampleFunctions/*.csproj'
      publishWebProjects: false
      modifyOutputPath: true
      zipAfterPublish: false

  - task: ArchiveFiles@2
    displayName: Create zip package
    inputs:
      rootFolderOrFile: "$(System.DefaultWorkingDirectory)/publish_output/ExampleFunctions"
      includeRootFolder: false
      archiveFile: "$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip"

  - task: PublishBuildArtifacts@1
    displayName: Publish zip package to pipeline
    inputs:
      PathtoPublish: '$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip'

  - task: AzureFunctionApp@1
    displayName: Deploy Azure FunctionApp
    inputs:
      azureSubscription: $(azureServiceConnection)
      appType: functionApp
      appName: $(funcAppName)
      package: '$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip'
      appSettings: '-EVENTGRID_DOMAIN_ENDPOINT $(eventGridEndpoint) -EVENTGRID_DOMAIN_KEY $(eventGridKey) -CosmosDBConnection $(cosmosdbConnectionString) -COLLECTION_NAME $(containerName) -DATABASE_NAME $(dbName)'

- job: Configure_cors
  displayName: Configure CORS in webapp
  dependsOn: Create_instanceCode
  pool:
    vmImage: 'ubuntu-latest'
  variables:
    hashTopicName: $[ dependencies.Create_instanceCode.outputs['setHashTopicName.hashTopicName'] ]
  steps:
  - task: AzureCLI@2
    displayName: Add CORS to webapp
    inputs:
      azureSubscription: $(azureServiceConnection)
      scriptLocation: 'inlineScript'
      scriptType: bash
      inlineScript: |
        az webapp cors add -g $(topicResourceGroup) -n $(funcAppName) --allowed-origins $(webAppURL)

- job: Configure_eventgrid
  displayName: Configure eventgrid subscription
  dependsOn:
  - BuildJob 
  - Create_instanceCode
  pool: 
    vmImage: 'ubuntu-latest'
  variables:
    hashTopicName: $[ dependencies.Create_instanceCode.outputs['setHashTopicName.hashTopicName'] ]
    topic: '$(projName)$(hashTopicName)eg'
  steps:
  
  # The task uses the new REST API to create a topic subcription of type AzureFunction
  # Because it's a preview API the az cli doesn't include yet the functionality so we need to leverage az rest 
  # to directly call the API
  - task: AzureCLI@2
    displayName: Create a topic subcription of type AzureFunction
    inputs:
      azureSubscription: $(azureServiceConnection)
      scriptLocation: 'inlineScript'
      scriptType: bash
      failOnStderr: true
      inlineScript: |
        subscriptionId=$(az account show --output tsv --query id)
        cat > body.json << EOF 
        { "name": "$(funcAppName)", 
          "properties": {
                  "topic": "/subscriptions/$subscriptionId/resourceGroups/$(topicResourceGroup)/providers/Microsoft.EventGrid/topics/$(topic)",
                  "destination": {
                          "endpointType": "AzureFunction",
                          "properties": {
                                  "resourceId": "/subscriptions/$subscriptionId/resourceGroups/$(topicResourceGroup)/providers/Microsoft.Web/sites/$(funcAppName)/functions/SaveToCosmos"
                          }
                  }
          }
        }
        EOF
        cat body.json
        az rest --method put --uri https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$(topicResourceGroup)/providers/Microsoft.EventGrid/topics/$(topic)/providers/Microsoft.EventGrid/eventSubscriptions/$(funcAppName)?api-version=2020-01-01-preview --body @body.json
    